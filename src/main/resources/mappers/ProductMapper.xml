<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.mwb.dao.mapper.ProductMapper">

    <resultMap id="employeeResult" type="Employee" extends="com.mwb.dao.mapper.EmployeeMapper.employeeResult"/>

    <resultMap id="taskResult" type="Task" extends="com.mwb.dao.mapper.BpmMapper.taskResult"/>

    <resultMap
        id="storeResult"
        type="Store">

        <id property="id" column="store_id"/>
        <result property="storeId" column="store_store_id"/>
        <result property="qq" column="store_qq"/>
        <result property="descriptionScore" column="store_description_score"/>
        <result property="serviceScore" column="store_service_score"/>
        <result property="speedScore" column="store_speed_score"/>
        <result property="type" column="store_type_id" javaType="StoreType" typeHandler="EnumIdTypeHandler"/>
    </resultMap>

    <resultMap
        id="productResult"
        type="Product">

        <id property="id" column="product_id"/>
        <result property="taoKeId" column="product_taoKe_id"/>
        <result property="productId" column="product_product_id"/>
        <result property="name" column="product_name"/>
        <result property="pictureUrl" column="product_picture_url"/>
        <result property="supplementPictureUrl" column="product_supplement_picture_url"/>
        <result property="reservePrice" column="product_reserve_price"/>
        <result property="sales" column="product_sales"/>
        <result property="url" column="product_url"/>
        <result property="activityTime" column="product_activity_time"/>
        <result property="immediately" column="product_immediately" jdbcType="CHAR" javaType="Bool"/>
        <result property="discountPrice" column="product_discount_price"/>
        <result property="couponAmount" column="product_coupon_amount"/>
        <result property="couponUrl" column="product_coupon_url"/>
        <result property="couponBeginTime" column="product_coupon_begin_time"/>
        <result property="couponEndTime" column="product_coupon_end_time"/>
        <result property="couponReceiveNumber" column="product_coupon_receive_number"/>
        <result property="couponSurplusNumber" column="product_coupon_surplus_number"/>
        <result property="condition" column="product_condition"/>
        <result property="features" column="product_features"/>
        <result property="description" column="product_description"/>
        <result property="chargePrice" column="product_charge_price"/>
        <result property="createTime" column="product_create_time"/>
        <result property="updateStatusTime" column="product_update_status_time"/>
        <result property="ratio" column="product_ratio"/>
        <result property="planUrl" column="product_plan_url"/>
        <result property="hireType" column="product_hire_type_id" javaType="HireType" typeHandler="EnumIdTypeHandler"/>
        <result property="productType" column="product_type_id" javaType="ProductType" typeHandler="EnumIdTypeHandler"/>
        <result property="activity" column="product_activity_id" javaType="Activity" typeHandler="EnumIdTypeHandler"/>
        <result property="status" column="product_status_id" javaType="ProductStatus" typeHandler="EnumIdTypeHandler"/>

        <association property="store" javaType="Store" resultMap="storeResult"/>
        <association property="employee" javaType="Employee" resultMap="employeeResult"/>
        <association property="voucher" javaType="ProductVoucher" resultMap="voucherResult"/>
        <association property="task" javaType="Task" resultMap="taskResult"/>
        <collection property="pictures" ofType="ProductPicture" resultMap="productPictureResult"/>
    </resultMap>

    <resultMap
        id="voucherResult"
        type="ProductVoucher">
            <id property="id" column="voucher_id"/>
            <result property="receiveNumber" column="voucher_receive_number"/>
            <result property="useNumber" column="voucher_use_number"/>
            <result property="payAmount" column="voucher_pay_amount"/>
            <result property="shouldChargeAmount" column="voucher_should_charge_amount"/>
            <result property="actualChargeAmount" column="voucher_actual_charge_amount"/>
            <result property="createTime" column="voucher_create_time"/>
            <result property="conversionRate" column="voucher_conversion_rate"/>
            <result property="withoutUrl" column="voucher_without_url"/>

        <association property="product" javaType="Product" resultMap="productResult"/>
        <collection property="pictures" ofType="VoucherPicture" resultMap="voucherPictureResult"/>
    </resultMap>

    <resultMap
        id="voucherPictureResult"
        type="VoucherPicture">
            <id property="id" column="voucher_picture_id"/>
            <result property="url" column="voucher_picture_url"/>
            <association property="voucher" javaType="ProductVoucher" resultMap="voucherResult"/>
    </resultMap>

    <resultMap
        id="productPictureResult"
        type="ProductPicture">
            <id property="id" column="product_picture_id"/>
            <result property="url" column="product_picture1_url"/>
            <association property="product" javaType="Product" resultMap="productResult"/>
    </resultMap>

    <sql id="pagingLimit">
        <include refid="com.mwb.dao.mapper.CommonMapper.pagingLimit"/>
    </sql>

    <sql id="employeeColumns">
        <include refid="com.mwb.dao.mapper.EmployeeMapper.employeeColumns"/>
    </sql>

    <sql id="taskColumns">
        <include refid="com.mwb.dao.mapper.BpmMapper.taskColumns"/>
    </sql>

    <sql id="storeColumns">
        s.id AS store_id,
        s.store_id AS store_store_id,
        s.qq AS store_qq,
        s.description_score AS store_description_score,
        s.service_score AS store_service_score,
        s.speed_score AS store_speed_score,
        s.type_id AS store_type_id
    </sql>


    <sql id="productColumns">
        p.id AS product_id,
        p.taoKe_id AS product_taoKe_id,
        p.product_id AS product_product_id,
        p.name AS product_name,
        p.picture_url AS product_picture_url,
        p.supplement_picture_url AS product_supplement_picture_url,
        p.reserve_price AS product_reserve_price,
        p.sales AS product_sales,
        p.url AS product_url,
        p.activity_time AS product_activity_time,
        p.immediately AS product_immediately,
        p.discount_price AS product_discount_price,
        p.coupon_amount AS product_coupon_amount,
        p.coupon_url AS product_coupon_url,
        p.coupon_begin_time AS product_coupon_begin_time,
        p.coupon_end_time AS product_coupon_end_time,
        p.coupon_receive_number AS product_coupon_receive_number,
        p.coupon_surplus_number AS product_coupon_surplus_number,
        p.`condition` AS product_condition,
        p.features AS product_features,
        p.description AS product_description,
        p.charge_price AS product_charge_price,
        p.create_time AS product_create_time,
        p.update_status_time AS product_update_status_time,
        p.ratio AS product_ratio,
        p.plan_url AS product_plan_url,
        p.hire_type_id AS product_hire_type_id,
        p.type_id AS product_type_id,
        p.activity_id AS product_activity_id,
        p.status_id AS product_status_id,
        p.employee_id AS product_employee_id,
        p.store_id AS product_store_id
    </sql>

    <sql id="voucherColumns">
        v.id AS voucher_id,
        v.receive_number AS voucher_receive_number,
        v.use_number AS voucher_use_number,
        v.pay_amount AS voucher_pay_amount,
        v.should_charge_amount AS voucher_should_charge_amount,
        v.actual_charge_amount AS voucher_actual_charge_amount,
        v.create_time AS voucher_create_time,
        v.conversion_rate AS voucher_conversion_rate,
        v.without_url AS voucher_without_url,
        v.product_id AS voucher_product_id
    </sql>

    <sql id="voucherPictureColumns">
        vp.id AS voucher_picture_id,
        vp.url AS voucher_picture_url,
        vp.voucher_id AS voucher_picture_voucher_id
    </sql>

    <sql id="productPictureColumns">
        pp.id AS product_picture_id,
        pp.url AS product_picture1_url,
        pp.product_id AS product_picture_product_id
    </sql>

    <sql id="productFilter" >
        <if test="filter.id != null">
            AND p.id = #{filter.id, javaType=int, jdbcType=INTEGER}
        </if>
        <if test="filter.productId != null">
            AND p.product_id = #{filter.productId, javaType=string, jdbcType=CHAR}
        </if>
        <if test="filter.name != null">
            AND p.name LIKE #{filter.name, javaType=string, jdbcType=CHAR}
        </if>
        <if test="filter.groupId != null">
            AND ae.group_id = #{filter.groupId, javaType=int, jdbcType=INTEGER}
        </if>
        <if test="filter.employeeId != null">
            AND ae.id = #{filter.employeeId, javaType=int, jdbcType=INTEGER}
        </if>
        <if test="filter.createBeginTime != null">
            AND p.create_time <![CDATA[ >= ]]> #{filter.createBeginTime, javaType=date, jdbcType=TIMESTAMP}
        </if>
        <if test="filter.createEndTime != null">
            AND p.create_time <![CDATA[ <= ]]> #{filter.createEndTime, javaType=date, jdbcType=TIMESTAMP}
        </if>
        <if test="filter.beginFromTime != null">
            AND p.coupon_begin_time <![CDATA[ >= ]]> #{filter.beginFromTime, javaType=date, jdbcType=TIMESTAMP}
        </if>
        <if test="filter.beginToTime != null">
            AND p.coupon_begin_time <![CDATA[ <= ]]> #{filter.beginToTime, javaType=date, jdbcType=TIMESTAMP}
        </if>
        <if test="filter.endFromTime != null">
            AND p.coupon_end_time <![CDATA[ >= ]]> #{filter.endFromTime, javaType=date, jdbcType=TIMESTAMP}
        </if>
        <if test="filter.endToTime != null">
            AND p.coupon_end_time <![CDATA[ <= ]]> #{filter.endToTime, javaType=date, jdbcType=TIMESTAMP}
        </if>
        <if test="filter.receiveMinNumber != null">
            AND p.coupon_receive_number <![CDATA[ >= ]]> #{filter.receiveMinNumber, javaType=int, jdbcType=INTEGER}
        </if>
        <if test="filter.receiveMaxNumber != null">
            AND p.coupon_receive_number <![CDATA[ <= ]]>  #{filter.receiveMaxNumber, javaType=int, jdbcType=INTEGER}
        </if>
        <if test="filter.surplusMinNumber != null">
            AND p.coupon_surplus_number <![CDATA[ >= ]]> #{filter.surplusMinNumber, javaType=int, jdbcType=INTEGER}
        </if>
        <if test="filter.surplusMaxNumber != null">
            AND p.coupon_surplus_number <![CDATA[ <= ]]>  #{filter.surplusMaxNumber, javaType=int, jdbcType=INTEGER}
        </if>
        <if test="filter.minChargePrice != null">
            AND p.charge_price <![CDATA[ >= ]]> #{filter.minChargePrice, javaType=bigdecimal, jdbcType=DECIMAL}
        </if>
        <if test="filter.maxChargePrice != null">
            AND p.charge_price <![CDATA[ <= ]]>  #{filter.maxChargePrice, javaType=bigdecimal, jdbcType=DECIMAL}
        </if>
        <if test="filter.minDiscountPrice != null">
            AND p.discount_price <![CDATA[ >= ]]> #{filter.minDiscountPrice, javaType=bigdecimal, jdbcType=DECIMAL}
        </if>
        <if test="filter.maxDiscountPrice != null">
            AND p.discount_price <![CDATA[ <= ]]>  #{filter.maxDiscountPrice, javaType=bigdecimal, jdbcType=DECIMAL}
        </if>
        <if test="filter.minPayPrice != null">
            AND v.pay_amount <![CDATA[ >= ]]> #{filter.minPayPrice, javaType=bigdecimal, jdbcType=DECIMAL}
        </if>
        <if test="filter.maxDiscountPrice != null">
            AND v.pay_amount <![CDATA[ <= ]]>  #{filter.maxPayPrice, javaType=bigdecimal, jdbcType=DECIMAL}
        </if>
        <if test="filter.type != null">
            AND p.type_id = #{filter.type.id, javaType=int, jdbcType=INTEGER}
        </if>
        <if test="filter.activity != null">
            AND p.activity_id = #{filter.activity.id, javaType=int, jdbcType=INTEGER}
        </if>
        <if test="filter.status != null">
            AND p.status_id = #{filter.status.id, javaType=int, jdbcType=INTEGER}
        </if>
        <if test="filter.excludeStatus != null">
            AND p.status_id NOT IN (
            <foreach collection="filter.excludeStatus" item="item" index="index" separator=",">
                #{item.id, javaType=int, jdbcType=INTEGER}
            </foreach>
            )
        </if>
        <if test="filter.includeStatus != null">
            AND p.status_id IN (
            <foreach collection="filter.includeStatus" item="item" index="index" separator=",">
                #{item.id, javaType=int, jdbcType=INTEGER}
            </foreach>
            )
        </if>
        <if test="filter.task != null">
           <if test="filter.task.employeeId != null">
               AND (
               rt.employee_id = #{filter.task.employeeId, javaType=int, jdbcType=INTEGER}
               OR ae.id = #{filter.employeeId, javaType=int, jdbcType=INTEGER}
               OR rt.employee_id IS NULL
               )
           </if>
        </if>
    </sql>

    <select id="selectProductById"
        resultMap="productResult">
        SELECT
            <include refid="productColumns"/>,
            <include refid="employeeColumns"/>,
            <include refid="storeColumns"/>,
            <include refid="voucherColumns"/>,
            <include refid="taskColumns"/>
        FROM
            t_product p
        INNER JOIN t_employee ae ON ae.id = p.employee_id
        INNER JOIN t_store s ON s.id = p.store_id
        LEFT JOIN t_product_voucher v ON v.product_id = p.id
        LEFT JOIN ru_task rt ON rt.id = p.task_id
        <where>
            p.id = #{id, javaType=int, jdbcType=INTEGER}
        </where>
    </select>

    <select id="selectProductByProductId"
        resultMap="productResult">
        SELECT
            <include refid="productColumns"/>,
            <include refid="employeeColumns"/>,
            <include refid="storeColumns"/>,
            <include refid="voucherColumns"/>
        FROM
            t_product p
        INNER JOIN t_employee ae ON ae.id = p.employee_id
        INNER JOIN t_store s ON s.id = p.store_id
        LEFT JOIN t_product_voucher v ON v.product_id = p.id
        <where>
            p.product_id = #{productId, javaType=string, jdbcType=CHAR}
        </where>
    </select>

    <select id="selectProductByStatus"
        resultMap="productResult">
        SELECT
            <include refid="productColumns"/>,
            <include refid="employeeColumns"/>,
            <include refid="storeColumns"/>,
            <include refid="voucherColumns"/>
        FROM
            t_product p
        INNER JOIN t_employee ae ON ae.id = p.employee_id
        INNER JOIN t_store s ON s.id = p.store_id
        LEFT JOIN t_product_voucher v ON v.product_id = p.id
        <where>
            <if test="employeeId != null" >
                p.employee_id = #{employeeId, javaType=int, jdbcType=INTEGER}
            </if>
            <if test="status != null" >
              AND  p.status_id = #{status.id, javaType=int, jdbcType=INTEGER}
            </if>
        </where>
    </select>

    <select id="selectProductPictureByProductId"
       resultMap="productPictureResult">
        SELECT
            <include refid="productPictureColumns"/>
        FROM
            t_product_picture pp
        WHERE
            pp.product_id = #{productId, javaType=int, jdbcType=INTEGER}
    </select>

    <select id="selectProductByFilter"
       resultMap="productResult">
        SELECT
            <include refid="productColumns"/>,
            <include refid="employeeColumns"/>,
            <include refid="storeColumns"/>,
            <include refid="voucherColumns"/>
        FROM
            t_product p
            INNER JOIN t_employee ae ON ae.id = p.employee_id
            INNER JOIN t_store s ON s.id = p.store_id
            LEFT JOIN t_product_voucher v ON v.product_id = p.id
            LEFT JOIN ru_task rt ON rt.id = p.task_id
        <where>
            <include refid="productFilter"/>
        </where>
        <choose>
            <when test="filter.orderAsc != null and filter.orderAsc == false">
                ORDER BY p.id DESC
            </when>
            <otherwise>
                ORDER BY p.id ASC
            </otherwise>
        </choose>
          <include refid="pagingLimit" />
    </select>

    <select id="countProductByFilter"
       resultType="int">
        SELECT
            COUNT(DISTINCT p.id)
        FROM
            t_product p
            INNER JOIN t_employee ae ON ae.id = p.employee_id
            INNER JOIN t_store s ON s.id = p.store_id
            LEFT JOIN t_product_picture pp ON pp.product_id = p.id
            LEFT JOIN t_product_voucher v ON v.product_id = p.id
            LEFT JOIN t_voucher_picture vp ON vp.voucher_id = v.id
            LEFT JOIN ru_task rt ON rt.id = p.task_id
        <where>
            <include refid="productFilter"/>
        </where>
    </select>

    <select id="selectProductVoucherByFilter"
        resultMap="voucherResult">
        SELECT
            <include refid="productColumns"/>,
            <include refid="employeeColumns"/>,
            <include refid="voucherColumns"/>
        FROM
            t_product_voucher v
            INNER JOIN t_product p ON v.product_id = p.id
            INNER JOIN t_employee ae ON ae.id = p.employee_id
        <where>
            <include refid="productFilter"/>
        </where>
        <choose>
            <when test="filter.orderAsc != null and filter.orderAsc == false">
                ORDER BY p.id DESC
            </when>
            <otherwise>
                ORDER BY p.id ASC
            </otherwise>
        </choose>
        <include refid="pagingLimit" />
    </select>

    <select id="countProductVoucherByFilter"
        resultType="int">
        SELECT
            COUNT(v.id)
        FROM
            t_product_voucher v
            INNER JOIN t_product p ON v.product_id = p.id
            INNER JOIN t_employee ae ON ae.id = p.employee_id
        <where>
            <include refid="productFilter"/>
        </where>
    </select>

    <select id="selectVoucherPictureByVoucherId"
            resultMap="voucherPictureResult">
        SELECT
            <include refid="voucherColumns"/>,
            <include refid="voucherPictureColumns"/>
        FROM
              t_voucher_picture vp
        INNER JOIN t_product_voucher v ON v.id = vp.voucher_id
        WHERE
              vp.voucher_id =  #{voucherId, javaType=int, jdbcType=INTEGER}
    </select>

    <insert
        id="insertStore"
        parameterType="Store"
        useGeneratedKeys="true"
        keyProperty="id">

        INSERT INTO t_store (
            store_id,
            qq,
            description_score,
            service_score,
            speed_score,
            type_id
        ) VALUES (
            #{storeId, javaType=string, jdbcType=CHAR},
            #{qq, javaType=string, jdbcType=CHAR},
            #{descriptionScore, javaType=bigdecimal, jdbcType=DECIMAL},
            #{serviceScore, javaType=bigdecimal, jdbcType=DECIMAL},
            #{speedScore, javaType=bigdecimal, jdbcType=DECIMAL},
            #{type.id, javaType=int, jdbcType=INTEGER}
        )
    </insert>

    <update
        id="updateProduct"
        parameterType="Product">

        UPDATE
            t_product
        <set>
            <if test="couponSurplusNumber != null">
                coupon_surplus_number = #{couponSurplusNumber, javaType=int, jdbcType=INTEGER},
            </if>
            <if test="couponReceiveNumber != null">
                coupon_receive_number = #{couponReceiveNumber, javaType=int, jdbcType=INTEGER},
            </if>
            <if test="updateStatusTime != null">
                update_status_time = #{updateStatusTime, javaType=date, jdbcType=TIMESTAMP},
            </if>
            <if test="status != null">
                status_id = #{status.id, javaType=int, jdbcType=INTEGER},
            </if>
            <if test="sales != null">
                sales = #{sales, javaType=int, jdbcType=INTEGER}
            </if>
        </set>
        WHERE
            id = #{id, javaType=int, jdbcType=INTEGER}
    </update>

    <insert
        id="insertProduct"
        parameterType="Product"
        useGeneratedKeys="true"
        keyProperty="id">

        INSERT INTO t_product (
            taoKe_id,
            product_id,
            name,
            picture_url,
            supplement_picture_url,
            reserve_price,
            sales,
            url,
            activity_time,
            immediately,
            discount_price,
            coupon_amount,
            coupon_url,
            coupon_begin_time,
            coupon_end_time,
            coupon_receive_number,
            coupon_surplus_number,
            `condition`,
            features,
            description,
            charge_price,
            create_time,
            update_status_time,
            ratio,
            plan_url,
            hire_type_id,
            type_id,
            activity_id,
            status_id,
            store_id,
            employee_id,
            task_id
        ) VALUES (
            #{taoKeId, javaType=string, jdbcType=CHAR},
            #{productId, javaType=string, jdbcType=CHAR},
            #{name, javaType=string, jdbcType=CHAR},
            #{pictureUrl, javaType=string, jdbcType=CHAR},
            #{supplementPictureUrl, javaType=string, jdbcType=CHAR},
            #{reservePrice, javaType=bigdecimal, jdbcType=DECIMAL},
            #{sales, javaType=int, jdbcType=INTEGER},
            #{url, javaType=string, jdbcType=CHAR},
            #{activityTime, javaType=date, jdbcType=TIMESTAMP},
            #{immediately.code, javaType=string, jdbcType=CHAR},
            #{discountPrice, javaType=bigdecimal, jdbcType=DECIMAL},
            #{couponAmount, javaType=bigdecimal, jdbcType=DECIMAL},
            #{couponUrl, javaType=string, jdbcType=CHAR},
            #{couponBeginTime, javaType=date, jdbcType=TIMESTAMP},
            #{couponEndTime, javaType=date, jdbcType=TIMESTAMP},
            #{couponReceiveNumber, javaType=int, jdbcType=INTEGER},
            #{couponSurplusNumber, javaType=int, jdbcType=INTEGER},
            #{condition, javaType=string, jdbcType=CHAR},
            #{features, javaType=string, jdbcType=CHAR},
            #{description, javaType=string, jdbcType=CHAR},
            #{chargePrice, javaType=bigdecimal, jdbcType=DECIMAL},
            #{createTime, javaType=date, jdbcType=TIMESTAMP},
            #{updateStatusTime, javaType=date, jdbcType=TIMESTAMP},
            #{ratio, javaType=bigdecimal, jdbcType=DECIMAL},
            #{planUrl, javaType=string, jdbcType=CHAR},
            #{hireType.id, javaType=int, jdbcType=INTEGER},
            #{productType.id, javaType=int, jdbcType=INTEGER},
            #{activity.id, javaType=int, jdbcType=INTEGER},
            #{status.id, javaType=int, jdbcType=INTEGER},
            #{store.id, javaType=int, jdbcType=INTEGER},
            #{employee.id, javaType=int, jdbcType=INTEGER},
            #{task.id, javaType=int, jdbcType=INTEGER}
        )
    </insert>

    <insert
        id="insertProductVoucher"
        parameterType="ProductVoucher"
        useGeneratedKeys="true"
        keyProperty="id">
        INSERT INTO t_product_voucher (
            receive_number,
            use_number,
            pay_amount,
            should_charge_amount,
            actual_charge_amount,
            create_time,
            conversion_rate,
            without_url,
            product_id
        ) VALUES (
            #{receiveNumber, javaType=int, jdbcType=INTEGER},
            #{useNumber, javaType=int, jdbcType=INTEGER},
            #{payAmount, javaType=bigdecimal, jdbcType=DECIMAL},
            #{shouldChargeAmount, javaType=bigdecimal, jdbcType=DECIMAL},
            #{actualChargeAmount, javaType=bigdecimal, jdbcType=DECIMAL},
            #{createTime, javaType=date, jdbcType=TIMESTAMP},
            #{conversionRate, javaType=bigdecimal, jdbcType=DECIMAL},
            #{withoutUrl, javaType=string, jdbcType=CHAR},
            #{product.id, javaType=int, jdbcType=INTEGER}
        )
    </insert>
    <delete id="deleteProductVoucher" >
        DELETE FROM t_product_voucher
        WHERE  product_id = #{productId, javaType=int, jdbcType=INTEGER}
    </delete>
    <insert
        id="insertVoucherPicture"
        parameterType="VoucherPicture"
        useGeneratedKeys="true"
        keyProperty="id">
        INSERT INTO t_voucher_picture (
            url,
            voucher_id
        ) VALUES (
            #{url, javaType=string, jdbcType=CHAR},
            #{voucher.id, javaType=int, jdbcType=INTEGER}
        )
    </insert>

    <insert
        id="insertProductPicture"
        parameterType="ProductPicture"
        useGeneratedKeys="true"
        keyProperty="id">
        INSERT INTO t_product_picture (
            url,
            product_id
        ) VALUES (
            #{url, javaType=string, jdbcType=CHAR},
            #{product.id, javaType=int, jdbcType=INTEGER}
        )
    </insert>

</mapper>